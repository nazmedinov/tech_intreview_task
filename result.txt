10 основных проблем в коде по критичности:

1. Хардкод токена - это небезопасно так хранить чувствительные данные в репозитории. Вынес в .env файл

2. Нет обработки API ответов и валидации ответов. Создал модели ответов и использую pydantic для валидации параметров.

3. Некорректная организация структуры проекта. Методы, эндпоинты, тест - все в одном файле, не используется ООП.
Использовал фреймворк исходя из принципов ООП и основ создания фреймворка.

4. Часть методов имеет некорректные названия, это затрудняет понимание того, что происходит в тесте и усложняет работу
для других коллег, работающих с кодом.

5. Необходимо выносить частоиспользуемые данные (например, URL) в переменные, которые можно будет легко поддерживать
в случае изменения, а не изменять в каждом месте использования.

6. Метод create_folder не проверяет, была ли папка успешно создана или уже существует. Добавил фикстуру - где удаляю
папку, если она существует перед тестом. А также отчищаю данные после теста.

7. В коде используется '_'.join([part_name[-2], part_name[-1]]) для формирования имени файла. Если формат будет изменен,
то код будет работать не так, как планировалось. Поэтому изменил процесс формирования name.

8. Плохая читаемость самого теста. К примеру, основные действия вынесены в непонятную по названию функцию,
много переменных определяется внутри теста.

9. Проверки должны быть понятными и логичными. В частности, "assert True" - всегда будет True и не имеет смысла

10. В функции get_sub_breeds нельзя возвращать пустой лист по умолчанию, если нужный ключ не будет найден,
т.к. можно пропустить ошибку, если параметр обязательный, то добавим его в респонс модель как обязательный.

Также были обнаружены другие проблемы, которые я попытался исправить в своей версии реализации теста ;)
